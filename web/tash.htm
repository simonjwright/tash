<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Final//EN">
<html>
<head>
  <meta name="description" content="Introduction to TASH,
    an Ada binding to Tcl/Tk.">
  <meta name="keywords" content="introduction, TASH, Ada, binding, Tcl/Tk">
  <TITLE>Introduction to TASH</TITLE>
  <LINK REL="stylesheet" TYPE="text/css" HREF="tash.css">
  <SCRIPT LANGUAGE="JavaScript1.2" SRC="inithiermenu.js" TYPE="text/javascript"></SCRIPT>
</head>

<BODY>

<table width="100%" border="0" cellspacing="0" cellpadding="0">

<!-- Page Heading -->
<tr>
  <td colspan="2"> <h1> &nbsp; </h1></td>
  <td colspan="3"> <h1> T<span class="smallcap">CL</span>
                        A<span class="smallcap">DA</span>
                        SH<span class="smallcap">ELL</span>
                    </h1></td>
  </tr>
<tr>
  <td colspan="2"> <h2> &nbsp; </h2></td>
  <td colspan="3"> <h2> Introduction to TASH </h2></td>
  </tr>

<!-- Body of Page (includes navigation and page content) -->
<tr>

  <!-- Site Index (left column) -->
  <td valign="top">
    <SCRIPT LANGUAGE='JavaScript' SRC='siteindex.js'></SCRIPT>
    <SCRIPT LANGUAGE='JavaScript' SRC='chaser.js'></SCRIPT>
    </td>
    
<!-- Body text left margin -->
<td width="20"> &nbsp;

<!-- Body text -->
<td valign="top" colspan="2" width="535">            

<div align=left class="body">
      
<!-- Page content -->

<h3>New Thick Binding</h3>

<p>With TASH version 8.3.2a, a new thick binding
is being released. The purpose of this interface is to</p>
      
<ul>
  <li>simplify and &quot;Ada-fy&quot; the
      capabilities of the Tcl scripting language,</li>
  <li>make access to Tcl facilities task-safe, and</li>
  <li>manage memory allocation of TASH (Tcl) objects.</li>
</ul>
      
<p>Some TASH users have been attracted to TASH because they are
already using Tcl/Tk and, like me, would like to use it from Ada or
extend it with Ada instead of C.  Many of these users are already
familiar with Tcl/Tk and its C interface made public in the header
files <b>tcl.h</b> and <b>tk.h</b>.</p>
      
<p>Others prefer not having to learn Tcl/Tk but would like to use, in
an Ada program, some the capabilities of Tcl/Tk such as:</p>
      
<ul>
  <li> list handling </li>
  <li> text file processing </li>
  <li> regular expression pattern matching and substitution </li>
  <li> platform-independent file and directory functions </li>
  <li> associative arrays </li>
  <li> execute other programs and connect to their standard input and
       output</li>
  <li> C-style printf </li>
  <li> platform-independent GUI toolkit </li>
</ul>

<p>In my case, I'd also like to be able to write programs in Ada for
which I'd normally use a scripting language such as Bourne, Perl, Tcl,
or awk. These languages typically provide built-in functions for
interacting with the operating system and reading and processing text
files at a much higher level than do compiled languages such as C and
Ada.  PERL, after all, stands for <b>P</b>ractical <b>E</b>xtraction
and <b>R</b>eport <b>L</b>anguage.</p>

<p>Also, what I had formerly called the <i>thick</i> binding to Tcl
was not really a thick binding. It was merely a rehash of the
thin binding (a translation of the <b>tcl.h</b> header file to Ada)
while using Ada data types, exceptions, and generics, in place of C
data types, integer return codes, and Tcl ClientData type.</p>

<p>Prior to version 8.3.2a, TASH was not really taking advantage of
the new Tcl object system which debuted in Tcl version 8.0. The
Tcl object system is a very clever implementation of dual-ported and
typed variables intended to speed the execution of Tcl but yet be
backwards compatible with the fact that Tcl variables were all of
string type. You can read more about it in <a
href="http://dev.scriptics.com/software/8.0.html#What's New in Tcl
8.0">What's New in Tcl 8.0</a>.</p>
      
<p>So, with the new thick binding, I have set out to implement Tcl/Tk
functionality in an Ada style.</p>

<p>These packages have been implemented so far:<p>

<div align="left">
<table cellspacing="2" cellpadding="2" class="download">
  <tr>
    <th> Package </th>
    <th> Purpose </th>
    </tr>
  <tr>
    <td valign="top"> Tash </td>
    <td> This is the parent package of the new thick binding packages.
         It declares a tagged, controlled type which is the base type
         for all Tash data types.  The body of this package implements
         the Tash data types finalization subprograms, creates a Tcl
         interpreter, and provides task-safe access to the interpreter.</td>
    </tr>
  <tr>
    <td valign="top"> Tash.Lists </td>
    <td> Implements the Tash list object which provides a heterogenous
         list handling data type.  Typically list handling functions are
         included such as insert, append, and delete.  Other functions
         implemented are capabilities to create lists by splitting
         strings at specified characters, join list elements to form
         a string, and sort lists.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Integer_Lists </td>
    <td> This is an instantiated generic package for inserting, appending,
         and fetching Integer list data elements.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Float_Lists </td>
    <td> This is an instantiated generic package for inserting, appending,
         and fetching Float list data elements.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Regexp </td>
    <td> Provides regular expression pattern matching and substitution
         on strings and Tash lists.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Arrays </td>
    <td> Provides associative array capabilities.  Array element indices
         are strings and element values are strngs, lists, integers, or
         floats.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Integer_Arrays </td>
    <td> This is an instantiated generic package for handling
         Integer array elements.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Float_Arrays </td>
    <td> This is an instantiated generic package for handling
         Float array elements.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.file </td>
    <td> Provides platform-independent file and directory handling
         capabilities such as getting and setting file attributes,
         time last accessed, time last modified, getting file
         name portions (directory, extension, tail, root), determining
         whether a file exists, is executable, is readable, is writable,
         or is a directory, etc.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.file_io </td>
    <td> Provides functions for opening, closing, reading, and writing
         files.  Particularly useful is the capability to open and
         read or write from a command pipeline.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.Platform </td>
    <td> Provides information about the platform such as 
         byte order, machine (intel, PPC, 68k, or sun4m),
         OS, OS version, platform (windows, macintosh, or unix),
         and user name.
      </td>
    </tr>
  <tr>
    <td valign="top"> Tash.system </td>
    <td> Provides system information such as the process identifier
         of the current process.
      </td>
    </tr>
</table>
</div>
<br>

<p>To promote simplicity of use, users of the thick binding need not
create and initialize a Tcl interpreter. This is done automatically
upon elaboration of the thick binding package. The interpreter itself
is in the private part of the package <b>Tash</b> and is in a
protected type so that multiple tasks may freely call any Tash
operation. One limitation, of course, is that you can have only one
interpreter.  This seemed like a reasonable compromise to gain the
simplification of leaving out the interpreter parameter in all
subprogram calls.</p>

<p>For a concrete example of using the new thick binding, see the <b>plang</b>
program in the <b>tash832a/apps</b> directory.</p>

<h3>Thinner Binding</h3>

<p>TASH includes both <i>thinner</i> and <i>thin</i> bindings to
Tcl. The thinner binding is a direct translation of the public Tcl
interface, <b>tcl.h</b>.  It is implemented in the Ada packages
<b>Tcl</b>. It includes all the definitions in <b>tcl.h</b>, both
functions and data types.  All data types are implemented with Ada
equivalents from <b>Interfaces.C</b>.  All functions take C data types
and use return codes for status information.

<h3>Thin Binding</h3>

<p>In addition to the thinner binding, TASH provides a thin binding
to Tcl.  This binding replaces C data types with Ada types (e.g.
<b>String</b> is used in place of <b>Interfaces.C.Strings.Chars_Ptr</b>),
uses exceptions in place of return codes and uses generic packages
to to implement Tcl <i>clientdata</i> types.</p>
          
<h3>The TASHELL Interpreter</h3>

<p>The Tcl distribution includes a Tcl shell interpreter, named
<b>tclsh</b>.  The TASH binding derives its name from the Ada version
of the Tcl shell interpreter: <b>T</b>cl <b>A</b>da <b>SH</b>ell.  Just like
<b>tclsh</b>, <b>tashell</b> reads and interprets a Tcl script.  It is
also a good starting point for building a custom Tcl interpreter in
which new Tcl commands are implemented in Ada rather than C. </p>

<p>An early paper describing the rationale of the design of TASH is
available in several different formats in the
<a href="docs.htm#intro">docs</a> directory.</p>

<h3>Tk Thin Binding</h3>

<p>TASH also includes both <i>thin</i> and <i>thick</i> bindings to Tk.
The thin binding is a direct translation of the public Tk interface,
<b>tk.h</b>, and is implemented in the Ada package,
<b>Tcl.Tk</b>.</p>

<h3>Tk Thick Binding</h3>

<p>An early, experimental thick binding to Tk is provided in the Ada
package, <b>Tcl.Tk.Ada</b>.  This binding does not support all Tk
widgets and has not yet been upgraded to take advantage of the new
TASH thick binding or the Tcl object system.</p>

<h3>The TWASHELL Interpreter</h3>

<p>TWASHELL is the <b>T</b>cl <b>W</b>indowing <b>A</b>da
<b>SH</b>ell. It is the Ada version of the Tcl/Tk <b>wish</b> program.
Just like <b>wish</b>, it reads and interprets a Tcl/Tk script. It is
also a starting point for building a custom Tcl/Tk interpreter in
which new Tcl/Tk commands are implemented in Ada rather than C.</p>

<p>An early paper describing how TWASH is a Platform-Independent
toolkit for development of Graphical User Interfaces is available in
several different formats in the
<a href="docs.htm#pigui">docs</a> directory.</p>

<!-- footer -->
<SCRIPT LANGUAGE="JavaScript1.2" SRC="footer.js" TYPE="text/javascript"></SCRIPT>

</table>
</body>
</html>
